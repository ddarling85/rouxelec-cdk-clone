{
  "Resources": {
    "cdkblogresourceRolelambda80C32557": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "cdk-blog-custom-resource2/cdk-blog-resource/Role_lambda/Resource"
      }
    },
    "cdkblogresourceRolelambdaDefaultPolicyC31F6302": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:DescribeVpcs",
                "ec2:DescribeInstances",
                "ec2:DescribeInstanceAttribute",
                "dynamodb:PutItem",
                "ec2:DescribeSubnets",
                "ec2:DescribeVpcPeeringConnections",
                "ec2:DescribeRouteTables",
                "ec2:CreateRoute",
                "ec2:ReplaceRouteTableAssociation",
                "ec2:CreateRouteTable",
                "ec2:DisassociateRouteTable",
                "ec2:AssociateRouteTable",
                "ec2:DeleteRoute",
                "ec2:ReplaceRoute",
                "ec2:DeleteRouteTable"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "cdkblogresourceRolelambdaDefaultPolicyC31F6302",
        "Roles": [
          {
            "Ref": "cdkblogresourceRolelambda80C32557"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "cdk-blog-custom-resource2/cdk-blog-resource/Role_lambda/DefaultPolicy/Resource"
      }
    },
    "cdkblogresourceBBE7554F": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SingletonLambdaee1bce2aa92b11eaa0a6129b54026e4dAD5CD3EB",
            "Arn"
          ]
        },
        "Message": "CustomResource says hello"
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "cdk-blog-custom-resource2/cdk-blog-resource/Resource/Default"
      }
    },
    "SingletonLambdaee1bce2aa92b11eaa0a6129b54026e4dAD5CD3EB": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "import boto3\nimport time\nimport json\nimport logging as log\nimport cfnresponse\n\nlog.getLogger().setLevel(log.INFO)\n\nphysical_id = 'TheOnlyCustomResource'\n\nec2 = boto3.resource('ec2', region_name='ca-central-1')\nclient = boto3.client('ec2', region_name='ca-central-1')\ndynamodb = boto3.resource('dynamodb', region_name='ca-central-1')\ncidr_range_table = dynamodb.Table('cidr_range_table')\n\ndef lambda_handler(event, context):\n    try:\n        log.info('Input event: %s', event)\n        if event['RequestType'] == 'Create' and event['ResourceProperties'].get('FailCreate', False):\n            raise RuntimeError('Create failure requested')\n\n        message = event['ResourceProperties']['Message']\n        attributes = {\n            'Response': 'You said \"%s\"' % message\n        }\n        update_dynamo()\n        cfnresponse.send(event, context, cfnresponse.SUCCESS,\n                         attributes, physical_id)\n    except Exception as e:\n        log.exception(e)\n        cfnresponse.send(event, context, cfnresponse.FAILED, {}, physical_id)\n\ndef update_dynamo():\n    filters = []\n    vpcs = list(ec2.vpcs.filter(Filters=filters))\n    for vpc in vpcs:\n        response = client.describe_vpcs(\n        VpcIds=[vpc.id]\n        )\n        my_json=json.dumps(response, sort_keys=True, indent=4)    \n        for subnet in vpc.subnets.all():\n            subnet_name=''\n            if not subnet.tags==None:\n                for tag in subnet.tags:\n                    if tag['Key']==\"Name\":\n                        subnet_name=tag['Value']\n                        response_cidr_range_table = cidr_range_table.put_item(\n                            Item={\n                                'id': subnet_name,\n                                'cidr_range': subnet.cidr_block,\n                                'vpc_id' : subnet.vpc_id,\n                                'component_type' : \"Subnet\",\n                                'subnet_id': subnet.subnet_id\n                        })          \n        priv_ip_add='t'\n        for instance in vpc.instances.all():\n            priv_ip_add=instance.private_ip_address\n    \n        vpc_name='test'\n        vpc_resp=response['Vpcs'][0]\n        if not vpc_resp.get('Tags') is None:\n            for tag in vpc_resp.get('Tags'):\n                if tag['Key']=='Name':  \n                    vpc_name=tag['Value']\n                    cidr_range_table.put_item(\n                    Item={\n                        'id': vpc_name,\n                        'cidr_range': vpc_resp['CidrBlock'],\n                        'vpc_id' : vpc_resp['VpcId'],\n                        'component_type' : \"VPC\",\n                        'ec2_ip_address' : priv_ip_add\n                        }\n                    )\n        response = client.describe_vpc_peering_connections(\n            Filters=[]\n        )\n            \n        vpcPeeringCs=response['VpcPeeringConnections']\n        for vpcPeeringConn in vpcPeeringCs:\n            cidr_accepter=vpcPeeringConn.get('AccepterVpcInfo').get('CidrBlock')\n            cidr_requester=vpcPeeringConn.get('RequesterVpcInfo').get('CidrBlock')\n            vpcPConnId=vpcPeeringConn.get('VpcPeeringConnectionId')\n            status=vpcPeeringConn.get('Status').get(\"Code\")\n            \n            if status==\"active\":\n                for route_table in vpc.route_tables.all():\n                    for asso_att in route_table.associations_attribute:\n                        if asso_att.get('Main'):\n                            if vpc.cidr_block==cidr_accepter:\n                                route_table.create_route(\n                                    DestinationCidrBlock=cidr_requester,\n                                    VpcPeeringConnectionId=vpcPConnId\n                                )\n                            if vpc.cidr_block==cidr_requester:\n                                route_table.create_route(\n                                    DestinationCidrBlock=cidr_accepter,\n                                    VpcPeeringConnectionId=vpcPConnId\n                                )    \n       "
        },
        "Handler": "index.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "cdkblogresourceRolelambda80C32557",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "Timeout": 300
      },
      "DependsOn": [
        "cdkblogresourceRolelambdaDefaultPolicyC31F6302",
        "cdkblogresourceRolelambda80C32557"
      ],
      "Metadata": {
        "aws:cdk:path": "cdk-blog-custom-resource2/SingletonLambdaee1bce2aa92b11eaa0a6129b54026e4d/Resource"
      }
    }
  },
  "Outputs": {
    "ResponseMessage": {
      "Description": "The message that came back from the Custom Resource",
      "Value": {
        "Fn::GetAtt": [
          "cdkblogresourceBBE7554F",
          "Response"
        ]
      }
    }
  }
}